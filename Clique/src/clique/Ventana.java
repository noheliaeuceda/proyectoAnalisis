package clique;

import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class Ventana extends javax.swing.JFrame {

    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        cb_grafo1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cb_grafo2 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jButton1.setText("Agregar un nuevo vertice");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Agregar arista");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1003, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );

        jButton3.setText("Clique");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLabel1.setText("De vertice ");

        jLabel2.setText("a");

        jButton4.setText("Reset");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(104, 104, 104)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_grafo1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cb_grafo2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addGap(70, 70, 70)
                        .addComponent(jButton3)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(cb_grafo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(cb_grafo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        int id = grafo.size();
        Node nodo = new Node(id, id);
        grafo.add(nodo);
//        JOptionPane.showMessageDialog(this, "Se ha agregado exitosamente");
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        DefaultComboBoxModel modelo2 = new DefaultComboBoxModel();
        for (int i = 0; i < grafo.size(); i++) {
            modelo.addElement(grafo.get(i).toString());
            modelo2.addElement(grafo.get(i).toString());
        }
        cb_grafo1.setModel(modelo);
        cb_grafo2.setModel(modelo2);
        dibujarGrafo(grafo);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        int ori = cb_grafo1.getSelectedIndex();
        int dest = cb_grafo2.getSelectedIndex();
        if (ori != dest) {
            Node or = grafo.get(ori);
            Node des = grafo.get(dest);
            boolean exits = false;
            for (int i = 0; i < or.getAristas().size(); i++) {
                int ID = (or.getAristas().get(i)).getNodoFinal().getID();
                if (ID == des.getID()) {
                    exits = true;
                }
            }
            if (!exits) {
                Arista aristaA1 = new Arista(grafo.get(ori), grafo.get(dest));
                Arista aristaA2 = new Arista(grafo.get(dest), grafo.get(ori));
                grafo.get(ori).getAristas().add(aristaA1);
                grafo.get(dest).getAristas().add(aristaA2);
                JOptionPane.showMessageDialog(this, "Se a creado la arista Exitosamente");
            } else {
                JOptionPane.showMessageDialog(this, "Ya existe esta arista");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Escoja un nodo difetente");
        }
        dibujarGrafo(grafo);
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        guardar(grafo);
        time_start = System.currentTimeMillis();
        ArrayList<Node> potenciales = new ArrayList();
        ArrayList<Node> encontrados = new ArrayList();
        clique(potenciales, grafo, encontrados);
        time_end = System.currentTimeMillis();
        print = cargar();
        int max = 0;
        int index = 0;
        for (int i = 0; i < set.size(); i++) {
            if (set.get(i).size() > max) {
                max = set.get(i).size();
                index = i;
            }
        }
        for (int i = 0; i < print.size(); i++) {
            for (int j = 0; j < set.get(index).size(); j++) {
                if (print.get(i).getValue() == (int) set.get(index).get(j)) {
                    print.get(i).setIdColor(1);
                }
            }
        }
        grafo = print;
        dibujarGrafo(grafo);
        JOptionPane.showMessageDialog(this, "La tarea tomo " + (time_end - time_start) + " milliseconds");
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        grafo = new ArrayList();
        dibujarGrafo(grafo);
    }//GEN-LAST:event_jButton4MouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb_grafo1;
    private javax.swing.JComboBox<String> cb_grafo2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    //arreglos principales
    ArrayList<Node> grafo = new ArrayList();
    ArrayList<Node> print = new ArrayList();
    //variables para dibujar
    mxGraph Graph = new mxGraph();
    mxGraphComponent GC = new mxGraphComponent(Graph);
    ArrayList complementaria = new ArrayList();
    ArrayList aux = new ArrayList();
    //variables secundarias
    ArrayList<ArrayList> set = new ArrayList();
    backUp guardar;
    long time_start, time_end;

    public void dibujarGrafo(ArrayList<Node> grafotemp) {
        for (int i = 0; i < complementaria.size(); i++) {
            Graph.getModel().remove(complementaria.get(i));
        }
        for (int i = 0; i < aux.size(); i++) {
            Graph.getModel().remove(aux.get(i));
        }
        aux = new ArrayList();
        complementaria = new ArrayList();
        Graph.clearSelection();
        Object Parent = Graph.getDefaultParent();
        GC.setPreferredSize(new Dimension(1000, 300));
        Graph.getModel().beginUpdate();
        int y = 0;
        for (int i = 0; i < grafotemp.size(); i++) {
            if (i % 3 == 0) {
                y = 100;
            } else {
                if (i % 3 == 1) {
                    y = 200;
                }
                if (i % 3 == 2) {
                    y = 0;
                }
            }
            if (grafotemp.get(i).getIdColor() == 0) {
                complementaria.add(Graph.insertVertex(Parent, null, grafotemp.get(i), 70 * i, y, 50, 50));
            } else if (grafotemp.get(i).getIdColor() == 1) {
                complementaria.add(Graph.insertVertex(Parent, null, grafotemp.get(i), 70 * i, y, 50, 50, "fillColor=blue"));
            }
        }
        Object Origen = null, Destino = null;
        for (int i = 0; i < grafotemp.size(); i++) {
            try {
                for (int j = 0; j < grafotemp.get(i).getAristas().size(); j++) {
                    int ID1 = grafotemp.get(i).getAristas().get(j).getNodoInicial().getID();
                    int ID2 = grafotemp.get(i).getAristas().get(j).getNodoFinal().getID();
                    if (complementaria.get(ID2) != null || complementaria.get(ID1) != null) {
                        Origen = (Object) complementaria.get(ID1);
                        Destino = (Object) complementaria.get(ID2);
                        aux.add(Graph.insertEdge(Parent, null, null, Origen, Destino));
                    }
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        Graph.getModel().endUpdate();
        jPanel1.add(GC);
        jPanel1.setLayout(new FlowLayout());
    }

    private boolean found(ArrayList<Node> candidatos, ArrayList<Node> encontrados) {
        boolean end = false;
        int counter;
        for (int i = 0; i < encontrados.size(); i++) {
            counter = 0;
            for (int j = 0; j < candidatos.size(); j++) {
                for (int k = 0; k < candidatos.get(j).getAristas().size(); k++) {
                    if (encontrados.get(i).getValue() == candidatos.get(j).getAristas().get(k).getNodoFinal().getValue()) {
                        counter++;
                    }
                }
            }
            if (counter == candidatos.size()) {
                end = true;
            }
        }
        return end;
    }

    private void clique(ArrayList<Node> potenciales, ArrayList<Node> candidatos, ArrayList<Node> encontrados) {
        ArrayList<Node> copyCandidatos = new ArrayList(candidatos);
        if (!found(candidatos, encontrados)) {
            for (int i = 0; i < copyCandidatos.size(); i++) {
                ArrayList<Node> tempCandidatos = new ArrayList();
                ArrayList<Node> tempEncontrados = new ArrayList();
                potenciales.add(copyCandidatos.get(i));
                candidatos.remove(copyCandidatos.get(i));
                for (int j = 0; j < candidatos.size(); j++) {
                    for (int k = 0; k < candidatos.get(j).getAristas().size(); k++) {
                        if (copyCandidatos.get(i).getValue() == candidatos.get(j).getAristas().get(k).getNodoFinal().getValue()) {
                            tempCandidatos.add(candidatos.get(j));
                        }
                    }
                }
                for (int j = 0; j < encontrados.size(); j++) {
                    for (int k = 0; k < encontrados.get(j).getAristas().size(); k++) {
                        if (copyCandidatos.get(i).getValue() == encontrados.get(j).getAristas().get(k).getNodoFinal().getValue()) {
                            tempEncontrados.add(encontrados.get(j));
                        }
                    }
                }
                if (tempCandidatos.isEmpty() && tempEncontrados.isEmpty()) {
                    ArrayList temp = new ArrayList();
                    for (int j = 0; j < potenciales.size(); j++) {
                        temp.add(potenciales.get(j).getValue());
                    }
                    set.add(temp);
                } else {
                    clique(potenciales, tempCandidatos, tempEncontrados);
                }
                encontrados.add(copyCandidatos.get(i));
                potenciales.remove(copyCandidatos.get(i));
            }
        }
    }

    private void guardar(ArrayList<Node> graph) {
        guardar = new backUp();
        guardar.llenar(graph);
        try {
            File archivo = null;
            try {
                archivo = new File("./backup.HP");
                FileOutputStream fo = new FileOutputStream(archivo);
                ObjectOutputStream oo = new ObjectOutputStream(fo);
                oo.writeObject(guardar);
                oo.close();
                fo.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al guardar " + ex, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error en el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    private ArrayList<Node> cargar() {
        ArrayList<Node> temp = new ArrayList();
        try {
            File archivo = null;
            try {
                archivo = new File("./backup.HP");
                FileInputStream fo = new FileInputStream(archivo);
                ObjectInputStream oo = new ObjectInputStream(fo);
                guardar = (backUp) oo.readObject();
                for (int i = 0; i < guardar.grafo.size(); i++) {
                    temp.add(guardar.grafo.get(i));
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay archivo guardado","ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "No se cargo el archivo","ERROR", JOptionPane.ERROR_MESSAGE);
        }
        return temp;
    }
}
